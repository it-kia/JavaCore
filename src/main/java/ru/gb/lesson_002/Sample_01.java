package ru.gb.lesson_002;

public class Sample_01 {

    public static void main(String[] args) {

        /*------------------------------------------------------------------------------
        Задание 1
        Задать целочисленный массив, состоящий из элементов 0 и 1.
        Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить
        0 на 1, 1 на 0;
        ------------------------------------------------------------------------------*/

        int[] arr = {1, 0, 1, 0, 1, 0, 1, 0, 1, 1};

        for (int i = 0; i < arr.length; i++) {

            switch (arr[i]) {
                case 0:

                    arr[i] = arr[i] + 1;
                    break;

                case 1:
                    arr[i] = arr[i] - 1;
                    break;

            }

            System.out.print(arr[i] + " ");
        }

        System.out.println();
        System.out.println();


        /*------------------------------------------------------------------------------
        Задание 2
        Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его
        значениями 0 3 6 9 12 15 18 21;
        ------------------------------------------------------------------------------*/

        int[] arr2 = new int[8];
        int num = 3;

        for (int i = 0; i < arr2.length; i++) {
            arr2[i] = num;
            num += 3;
            System.out.print(arr2[i] + " ");

        }

        System.out.println();
        System.out.println();


        /*------------------------------------------------------------------------------
        Задание 3
        Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом,
        и числа меньшие 6 умножить на 2;
        ------------------------------------------------------------------------------*/

        int[] arr3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};

        for (int i = 0; i < arr3.length; i++) {

            if (arr3[i] < 6) {
                arr3[i] *= 2;
                System.out.print(arr3[i] + " ");
            } else {
                System.out.print(arr3[i] + " ");
            }

        }

        System.out.println();
        System.out.println();


        /*------------------------------------------------------------------------------
        Задание 4
        Создать квадратный двумерный целочисленный массив (количество строк и столбцов
        одинаковое), и с помощью цикла(-ов) заполнить его диагональные элементы
        единицами;
        ------------------------------------------------------------------------------*/

        int[][] tab1 = new int[8][8];

        for (int i = 0; i < tab1.length; i++) {

            for (int j = 0; j < tab1.length; j++) {
                if ((i == j) || (i == tab1.length - j - 1)) {
                    tab1[i][j] = 1;
                } else
                    tab1[i][j] = 0;
                System.out.print(tab1[i][j] + "  ");

            }
            System.out.println();

        }
        System.out.println();
        System.out.println();


        /*------------------------------------------------------------------------------
        Задание 5
        ** Задать одномерный массив и найти в нем минимальный и максимальный элементы
        (без помощи интернета);
        ------------------------------------------------------------------------------*/

        int minNum = 0;
        int maxNum = 0;
        int fst = 0;
        int[] arr4 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, -1};

        for (int i = 0; i < arr4.length; i++) {

            if (fst == 0) {
                minNum = arr4[i];
                maxNum = arr4[i];
                fst = 1;
            }

            if (minNum > arr4[i]) {
                minNum = arr4[i];
            }

            if (maxNum < arr4[i]) {
                maxNum = arr4[i];
            }
        }
        System.out.println("Минимальное значение массива = " + minNum);
        System.out.println("Максимальное значение массива = " + maxNum);

        System.out.println();
        System.out.println();


        /*------------------------------------------------------------------------------
        Задание 6
        ** Написать метод, в который передается не пустой одномерный целочисленный
        массив, метод должен вернуть true, если в массиве есть место, в котором сумма
        левой и правой части массива равны. Примеры:
        checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true,
        checkBalance([1, 1, 1, || 2, 1]) → true,
        граница показана символами ||, эти символы в массив не входят.
        ------------------------------------------------------------------------------*/

        //Инициируем массив
        int[] arr6 = {2, 2, 2, 1, 2, 2, 10, 1};
        boolean res_bln;

        //Вызываем созданный метод, присваивая ответ в переменную
        res_bln = find_equality(arr6);

        if (res_bln) {
            System.out.println("Равенство сторонами в переданном массиве найдено!");
        }

        System.out.println();
        System.out.println();

        /*------------------------------------------------------------------------------
        Задание 7
        **** Написать метод, которому на вход подается одномерный массив и число n
        (может быть положительным, или отрицательным), при этом метод должен сместить
        все элементы массива на n позиций. Элементы смещаются циклично. Для усложнения
        задачи нельзя пользоваться вспомогательными массивами. Примеры:
        [ 1, 2, 3 ] при n = 1 (на один вправо) -> [ 3, 1, 2 ];
        [ 3, 5, 6, 1] при n = -2 (на два влево) -> [ 6, 1, 3, 5 ].
        При каком n в какую сторону сдвиг можете выбирать сами.
        ------------------------------------------------------------------------------*/

        //Инициируем массив
        int[] arr7 = {1, 2, 3, 4, 5};

        //Куда и насколько пойдет сдвиг (положительное вправо, отрицательное влево)
        int nShift = -2;

        int[] out_arr;

        //Печатаем массив
        printArray(arr7);

        //Вызываем созданный метод, присваивая ответ в переменную
        out_arr = shift_array(arr7, nShift);

        //Печатаем массив после сдвига
        printArray(out_arr);

    }

    /**
     * Метод для 6-го задания, проверяющий среди переданнго массива целых чисел есть ли
     * место, в котором правая и левые части педанного массива равны
     * @param inArr целое числе
     * @return True - Равенство найдено, False - Равенство не найдено.
     */
    public static boolean find_equality(int[] inArr) {

        boolean tmpBln = false;
        int sumLeft;
        int sumRight;
        int tmp;

        printArray(inArr);

        // Общий цикл по перебору левого и правого
        for (int i = 0; i < inArr.length; i++) {

            //Обнуялем значения сумм сторон
            sumLeft = 0;
            sumRight = 0;

            //Вложенный цикл по проверке суммы
            for (int q = 0; q < inArr.length; q++) {

                //Складываем значения из левой части
                if (q <= i) {
                    sumLeft = sumLeft + inArr[q];
                }

                //Складываем значения из правой части
                if (q > i) {
                    sumRight = sumRight + inArr[q];
                }

            }

            // Проверка
            //System.out.println("sumLeft = [" + sumLeft + "]" + "sumRight = [" + sumRight + "]");

            if (sumLeft == sumRight){
                //System.out.println("Бинго!");
                tmpBln = true;
            }

        }

        // Возвращаем переменную
        return tmpBln;
    }

    /**
     * Метод для 7-го задания, который смещает значение в массиве на количество символов вправо или влево
     * @param inArr Входяций массив для преобразования
     * @param nShft Куда и насколько пойдет сдвиг (положительное вправо, отрицательное влево)
     * @return Массив после сдвига
     */
    public static int[] shift_array (int[] inArr, int nShft){

        //Массив для возврата
        int[] out_array = inArr;

        //Временная переменная
        int nTmp;

        //Сдвигаем вправо
        if (nShft > 0){

            //Бежим по массиву с учетом количества, на которое необходимо сдвинуть
            for (int i = 0; i < nShft; i++) {

                //Сохраняем в переменную первое значение
                nTmp = inArr[0];

                //Сохраняем последнее значение входящего массива на первое место исходящего
                out_array[0] = inArr[inArr.length - 1];
                //System.out.println(inArr[inArr.length - 1]);

                //Перезаписываем массив оставшийся массив
                for (int q = 1; q < inArr.length - 1; q++) {
                    inArr[inArr.length - q] = inArr[inArr.length - q - 1];
                }

                //Вставляем скопированное значение на место сдвига
                inArr[1] = nTmp;
            }
        }

        //Сдвигаем влево
        if (nShft < 0){

            //Бежим по массиву с учетом количества, на которое необходимо сдвинуть
            for (int i = 0; i > nShft; i--) {

                //Сохраняем в переменную последнее значение
                nTmp = inArr[inArr.length - 1];

                //Сохраняем последнее значение в входящего массива на первое место исходящего
                inArr[inArr.length - 1] = inArr[0];

                //Перезаписываем массив оставшийся массив
                for (int q = 1; q < inArr.length - 1; q++) {
                    inArr[q - 1] = inArr[q];
                }

                //Вставляем скопированное значение на место сдвига
                inArr[inArr.length - 2] = nTmp;
            }
        }

        //Если передан 0
        if(nShft == 0){
            out_array = inArr;
        }

        return out_array;

    }

    /**
     * Всмомагательный метод для печати передаваемого массива в консоль
     * @param a метод передаваемый на вход для печати
     */
    public static void printArray(int[] a) {
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + "  ");
        }
        System.out.println();
    }


}